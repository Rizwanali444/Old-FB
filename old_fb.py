#!/data/data/com.termux/files/usr/bin/python
import base64
exec(''.join([chr(ord(c)^111) for c in base64.b64decode('').decode()]))
